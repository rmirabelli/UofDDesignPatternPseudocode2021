// Abstract

UIItem {
  Color color;
  ...
}

UIItemFactory {
  Color: color
  CreateUIItem()
}

UIItemThemeFactory {
  UIItem createCanvas();
  UIItem createText();
}

// Concrete

Canvas: UIItem {

}

Text: UIItem {

}

CanvasFactory: UIItemFactory {
  CreateUIItem()  {
    return new Canvas(color: color)
  }
}

TextFactory: UIItemFactory {
  CreateUIItem() {
    return new Text(color: color)
  }
}

DarkThemeFactory: UIItemThemeFactory {
  canvasFactory = CanvasFactory(color: Black);
  textFactory = TextFactory(color: White);

  createCanvas() {
    canvasFactory.CreateUIItem();
  }
}

LightThemeFactory: UIItemThemeFactory {

}


// while in use

factory = DarkThemeFactory()
canvas = factory.createCanvas()
text = factory.createText()

// OTHERWISE (if ab factory doesn't exist)

if (currentTheme == DarkModeTheme) {
  canvas = Canvas(color: black)
  text = Text(color: white)
} else {
  ...
} else {
  ...
}




CYCLOMATIC COMPLEXITY

compareB() {
  if(b) {

  } else if (c) {

  } else {

  }
}

if a {

  compareB()

}
